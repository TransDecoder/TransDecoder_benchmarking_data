#!/usr/bin/env Rscript

#options(stringsAsFactors = FALSE)

library('caret')
library('rpart')
library('rpart.plot')


main = function () {
    
    args<-commandArgs(TRUE)

    if (length(args) == 0) {
        stop("require param: cds.longest.scores")
    }

    data_file = args[1]
    
    data = read.table(data_file, header=T, com='', row.names=1)

    ## filter out non-ref orfs in non-random data
    #data = data[ union(which(data$reforf == "YES"), grep("rand", rownames(data))), ]
    

    ## length normalize
    
    target_data = len_normalize_adj(data)

    pdf(paste0(data_file, ".rpart.results.pdf"))
    
    run_rpart(target_data, paste0(data_file, '.adj.all.data'))


    rand_indices = grep("rand", rownames(target_data))


    ## ref orfs vs. non-ref orfs on target sequences:
    ref_vs_nonref_data = target_data[-grep("rand", rownames(target_data)),]
    run_rpart(ref_vs_nonref_data, '.adj.ref_vs_nonref.data')

    ## ref orfs vs. random orfs
    ref_vs_rand_data = target_data[union(grep("rand", rownames(target_data)), which(target_data$reforf == "YES")),]
    run_rpart(ref_vs_rand_data, '.adj.ref_vs_rand.data')

    
    boxplot(target_data[target_data$reforf == "YES",][, c('score_1', 'score_2', 'score_3', 'score_4', 'score_5', 'score_6')], main='ref orfs', outline=F)
    abline(h=0, col='blue')
    
    boxplot(ref_vs_nonref_data[ref_vs_nonref_data$reforf == "NO",][, c('score_1', 'score_2', 'score_3', 'score_4', 'score_5', 'score_6')], main='non-ref orfs', outline=F)
    abline(h=0, col='red')
    
    boxplot(ref_vs_rand_data[ref_vs_rand_data$reforf == "NO",][, c('score_1', 'score_2', 'score_3', 'score_4', 'score_5', 'score_6')], main='random orfs', outline=F)
    abline(h=0, col='orange')

        
    dev.off()
    message("done")
    
    
    
    
    

    
}

run_rpart = function(target_data, target_data_outfile) {
        
    write.table(target_data, target_data_outfile, quote=F, sep="\t")
    
    rownames(target_data) = NULL
        
        
    #trctrl = trainControl(method='repeatedcv', number=10, repeats=3)
    #
    #f = as.formula(reforf ~ .)
    #
    #t = train(f, target_data, method='rpart',
    #          trControl=trctrl,
    #          tuneLength = 10)


    #t = rpart(reforf ~ seq_length + score_1 + s1_max_all + s1_max_3, target_data,
                                        #          control=rpart.control(minsplit=10, cp=0.005))

    t = rpart(reforf ~ seq_length + score_1 + s1_max_all, target_data,
              control=rpart.control(minsplit=10, cp=0.005))
    
    print(t)
    
    
    #rpart.plot(t$finalModel)

    rpart.plot(t, main=target_data_outfile)
               
    
    
}

len_normalize_adj = function(data) {

        
    scores = data[,c('score_1', 'score_2', 'score_3', 'score_4', 'score_5', 'score_6')]

    len_norm_scores = sweep(scores, 1, data$seq_length, '/')

    s1_max_all = (data$score_1 > apply(data[,c('score_2', 'score_3', 'score_4', 'score_5', 'score_6')], 1, max))

    s1_max_3 = (data$score_1 > apply(data[,c('score_2', 'score_3')], 1, max))
    
    len_norm_scores = cbind(seq_length=data$seq_length, len_norm_scores, s1_max_all=s1_max_all, s1_max_3=s1_max_3, reforf=data$reforf)
    
    return(len_norm_scores)
    
}
    

main()
    
